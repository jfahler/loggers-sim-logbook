{
  "version": 3,
  "sources": ["../../../../encore.gen/internal/entrypoints/combined/main.ts", "../../../../discord/send_pilot_stats.ts", "../../../../discord/webhook.ts", "../../../../logbook/get_flight.ts", "../../../../logbook/db.ts", "../../../../logbook/list_flights.ts", "../../../../logbook/list_pilots.ts", "../../../../logbook/upload.ts", "../../../../discord/encore.service.ts", "../../../../logbook/encore.service.ts"],
  "sourcesContent": ["import { registerGateways, registerHandlers, run, type Handler } from \"encore.dev/internal/codegen/appinit\";\n\nimport { sendPilotStats as discord_sendPilotStatsImpl0 } from \"../../../../discord/send_pilot_stats\";\nimport { sendFlightSummary as discord_sendFlightSummaryImpl1 } from \"../../../../discord/webhook\";\nimport { getFlight as logbook_getFlightImpl2 } from \"../../../../logbook/get_flight\";\nimport { listFlights as logbook_listFlightsImpl3 } from \"../../../../logbook/list_flights\";\nimport { listPilots as logbook_listPilotsImpl4 } from \"../../../../logbook/list_pilots\";\nimport { uploadTacview as logbook_uploadTacviewImpl5 } from \"../../../../logbook/upload\";\nimport * as discord_service from \"../../../../discord/encore.service\";\nimport * as frontend_service from \"../../../../frontend/encore.service\";\nimport * as logbook_service from \"../../../../logbook/encore.service\";\n\nconst gateways: any[] = [\n];\n\nconst handlers: Handler[] = [\n    {\n        apiRoute: {\n            service:           \"discord\",\n            name:              \"sendPilotStats\",\n            handler:           discord_sendPilotStatsImpl0,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: discord_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"discord\",\n            name:              \"sendFlightSummary\",\n            handler:           discord_sendFlightSummaryImpl1,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: discord_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"logbook\",\n            name:              \"getFlight\",\n            handler:           logbook_getFlightImpl2,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: logbook_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"logbook\",\n            name:              \"listFlights\",\n            handler:           logbook_listFlightsImpl3,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: logbook_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"logbook\",\n            name:              \"listPilots\",\n            handler:           logbook_listPilotsImpl4,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: logbook_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"logbook\",\n            name:              \"uploadTacview\",\n            handler:           logbook_uploadTacviewImpl5,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: logbook_service.default.cfg.middlewares || [],\n    },\n];\n\nregisterGateways(gateways);\nregisterHandlers(handlers);\n\nawait run(import.meta.url);\n", "import { api } from \"encore.dev/api\";\nimport { secret } from \"encore.dev/config\";\n\nconst discordWebhookUrl = secret(\"DiscordWebhookUrl\");\n\nexport interface SendPilotStatsRequest {\n  pilotName: string;\n  pilotCallsign?: string | null;\n  totalFlights: number;\n  totalFlightTime: number;\n  totalAaKills: number;\n  totalAgKills: number;\n  totalFratKills: number;\n  totalRtbCount: number;\n  totalEjections: number;\n  totalDeaths: number;\n  favoriteAircraft: string;\n  averageFlightDuration: number;\n}\n\nexport interface SendPilotStatsResponse {\n  success: boolean;\n  message: string;\n}\n\n// Sends pilot statistics to Discord via webhook.\nexport const sendPilotStats = api<SendPilotStatsRequest, SendPilotStatsResponse>(\n  { expose: true, method: \"POST\", path: \"/discord/pilot-stats\" },\n  async (req) => {\n    const webhookUrl = discordWebhookUrl();\n    \n    if (!webhookUrl) {\n      return {\n        success: false,\n        message: \"Discord webhook URL not configured\"\n      };\n    }\n\n    const totalKills = req.totalAaKills + req.totalAgKills;\n    const killDeathRatio = req.totalDeaths > 0 ? (totalKills / req.totalDeaths).toFixed(2) : totalKills.toString();\n\n    const embed = {\n      title: \"üìä Pilot Statistics\",\n      color: 0x0099ff,\n      fields: [\n        {\n          name: \"Pilot\",\n          value: req.pilotCallsign ? `${req.pilotName} (${req.pilotCallsign})` : req.pilotName,\n          inline: false\n        },\n        {\n          name: \"Total Flights\",\n          value: req.totalFlights.toString(),\n          inline: true\n        },\n        {\n          name: \"Total Flight Time\",\n          value: formatDuration(req.totalFlightTime),\n          inline: true\n        },\n        {\n          name: \"Average Flight Duration\",\n          value: formatDuration(req.averageFlightDuration),\n          inline: true\n        },\n        {\n          name: \"A-A Kills\",\n          value: req.totalAaKills.toString(),\n          inline: true\n        },\n        {\n          name: \"A-G Kills\",\n          value: req.totalAgKills.toString(),\n          inline: true\n        },\n        {\n          name: \"Total Kills\",\n          value: totalKills.toString(),\n          inline: true\n        },\n        {\n          name: \"Friendly Kills\",\n          value: req.totalFratKills.toString(),\n          inline: true\n        },\n        {\n          name: \"RTB Count\",\n          value: req.totalRtbCount.toString(),\n          inline: true\n        },\n        {\n          name: \"Ejections\",\n          value: req.totalEjections.toString(),\n          inline: true\n        },\n        {\n          name: \"Deaths\",\n          value: req.totalDeaths.toString(),\n          inline: true\n        },\n        {\n          name: \"K/D Ratio\",\n          value: killDeathRatio,\n          inline: true\n        },\n        {\n          name: \"Favorite Aircraft\",\n          value: req.favoriteAircraft,\n          inline: false\n        }\n      ],\n      timestamp: new Date().toISOString(),\n      footer: {\n        text: \"DCS Pilot Logbook\"\n      }\n    };\n\n    const payload = {\n      embeds: [embed]\n    };\n\n    try {\n      const response = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload)\n      });\n\n      if (response.ok) {\n        return {\n          success: true,\n          message: \"Pilot statistics sent to Discord successfully\"\n        };\n      } else {\n        return {\n          success: false,\n          message: `Failed to send to Discord: ${response.status} ${response.statusText}`\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: `Error sending to Discord: ${error}`\n      };\n    }\n  }\n);\n\nfunction formatDuration(seconds: number): string {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const remainingSeconds = seconds % 60;\n\n  if (hours > 0) {\n    return `${hours}h ${minutes}m`;\n  } else if (minutes > 0) {\n    return `${minutes}m ${remainingSeconds}s`;\n  } else {\n    return `${remainingSeconds}s`;\n  }\n}\n", "import { api } from \"encore.dev/api\";\nimport { secret } from \"encore.dev/config\";\n\nconst discordWebhookUrl = secret(\"DiscordWebhookUrl\");\n\nexport interface SendFlightSummaryRequest {\n  flightId: number;\n  pilotName: string;\n  pilotCallsign?: string | null;\n  aircraftType: string;\n  missionName?: string | null;\n  startTime: Date;\n  durationSeconds?: number | null;\n  aaKills: number;\n  agKills: number;\n  fratKills: number;\n  rtbCount: number;\n  ejections: number;\n  deaths: number;\n}\n\nexport interface SendFlightSummaryResponse {\n  success: boolean;\n  message: string;\n}\n\n// Sends a flight summary to Discord via webhook.\nexport const sendFlightSummary = api<SendFlightSummaryRequest, SendFlightSummaryResponse>(\n  { expose: true, method: \"POST\", path: \"/discord/flight-summary\" },\n  async (req) => {\n    const webhookUrl = discordWebhookUrl();\n    \n    if (!webhookUrl) {\n      return {\n        success: false,\n        message: \"Discord webhook URL not configured\"\n      };\n    }\n\n    const embed = {\n      title: \"üõ©Ô∏è Flight Summary\",\n      color: 0x00ff00,\n      fields: [\n        {\n          name: \"Pilot\",\n          value: req.pilotCallsign ? `${req.pilotName} (${req.pilotCallsign})` : req.pilotName,\n          inline: true\n        },\n        {\n          name: \"Aircraft\",\n          value: req.aircraftType,\n          inline: true\n        },\n        {\n          name: \"Mission\",\n          value: req.missionName || \"Unknown\",\n          inline: true\n        },\n        {\n          name: \"Duration\",\n          value: req.durationSeconds ? formatDuration(req.durationSeconds) : \"Unknown\",\n          inline: true\n        },\n        {\n          name: \"A-A Kills\",\n          value: req.aaKills.toString(),\n          inline: true\n        },\n        {\n          name: \"A-G Kills\",\n          value: req.agKills.toString(),\n          inline: true\n        },\n        {\n          name: \"Friendly Kills\",\n          value: req.fratKills.toString(),\n          inline: true\n        },\n        {\n          name: \"RTB Count\",\n          value: req.rtbCount.toString(),\n          inline: true\n        },\n        {\n          name: \"Ejections\",\n          value: req.ejections.toString(),\n          inline: true\n        },\n        {\n          name: \"Deaths\",\n          value: req.deaths.toString(),\n          inline: true\n        }\n      ],\n      timestamp: req.startTime.toISOString(),\n      footer: {\n        text: \"DCS Pilot Logbook\"\n      }\n    };\n\n    const payload = {\n      embeds: [embed]\n    };\n\n    try {\n      const response = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload)\n      });\n\n      if (response.ok) {\n        return {\n          success: true,\n          message: \"Flight summary sent to Discord successfully\"\n        };\n      } else {\n        return {\n          success: false,\n          message: `Failed to send to Discord: ${response.status} ${response.statusText}`\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: `Error sending to Discord: ${error}`\n      };\n    }\n  }\n);\n\nfunction formatDuration(seconds: number): string {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const remainingSeconds = seconds % 60;\n\n  if (hours > 0) {\n    return `${hours}h ${minutes}m ${remainingSeconds}s`;\n  } else if (minutes > 0) {\n    return `${minutes}m ${remainingSeconds}s`;\n  } else {\n    return `${remainingSeconds}s`;\n  }\n}\n", "import { api, APIError } from \"encore.dev/api\";\nimport { logbookDB } from \"./db\";\nimport type { FlightSummary } from \"./types\";\n\nexport interface GetFlightRequest {\n  id: number;\n}\n\n// Retrieves a specific flight with all details.\nexport const getFlight = api<GetFlightRequest, FlightSummary>(\n  { expose: true, method: \"GET\", path: \"/flights/:id\" },\n  async (req) => {\n    const flight = await logbookDB.queryRow<any>`\n      SELECT \n        f.id, f.pilot_id, f.aircraft_type, f.mission_name,\n        f.start_time, f.end_time, f.duration_seconds,\n        f.aa_kills, f.ag_kills, f.frat_kills, f.rtb_count,\n        f.ejections, f.deaths, f.tacview_filename, f.created_at,\n        p.name as pilot_name, p.callsign as pilot_callsign\n      FROM flights f\n      JOIN pilots p ON f.pilot_id = p.id\n      WHERE f.id = ${req.id}\n    `;\n\n    if (!flight) {\n      throw APIError.notFound(\"flight not found\");\n    }\n\n    return {\n      id: flight.id,\n      pilotId: flight.pilot_id,\n      aircraftType: flight.aircraft_type,\n      missionName: flight.mission_name,\n      startTime: flight.start_time,\n      endTime: flight.end_time,\n      durationSeconds: flight.duration_seconds,\n      aaKills: flight.aa_kills,\n      agKills: flight.ag_kills,\n      fratKills: flight.frat_kills,\n      rtbCount: flight.rtb_count,\n      ejections: flight.ejections,\n      deaths: flight.deaths,\n      tacviewFilename: flight.tacview_filename,\n      createdAt: flight.created_at,\n      pilotName: flight.pilot_name,\n      pilotCallsign: flight.pilot_callsign\n    };\n  }\n);\n", "import { SQLDatabase } from \"encore.dev/storage/sqldb\";\n\nexport const logbookDB = new SQLDatabase(\"logbook\", {\n  migrations: \"./migrations\",\n});\n", "import { api } from \"encore.dev/api\";\nimport { Query } from \"encore.dev/api\";\nimport { logbookDB } from \"./db\";\nimport type { FlightSummary } from \"./types\";\n\nexport interface ListFlightsRequest {\n  pilotId?: Query<number>;\n  limit?: Query<number>;\n  offset?: Query<number>;\n}\n\nexport interface ListFlightsResponse {\n  flights: FlightSummary[];\n  total: number;\n}\n\n// Retrieves all flights with pilot information.\nexport const listFlights = api<ListFlightsRequest, ListFlightsResponse>(\n  { expose: true, method: \"GET\", path: \"/flights\" },\n  async (req) => {\n    const limit = req.limit || 50;\n    const offset = req.offset || 0;\n\n    let flights;\n    let total;\n\n    if (req.pilotId) {\n      flights = await logbookDB.queryAll<any>`\n        SELECT \n          f.id, f.pilot_id, f.aircraft_type, f.mission_name,\n          f.start_time, f.end_time, f.duration_seconds,\n          f.aa_kills, f.ag_kills, f.frat_kills, f.rtb_count,\n          f.ejections, f.deaths, f.tacview_filename, f.created_at,\n          p.name as pilot_name, p.callsign as pilot_callsign\n        FROM flights f\n        JOIN pilots p ON f.pilot_id = p.id\n        WHERE f.pilot_id = ${req.pilotId}\n        ORDER BY f.start_time DESC\n        LIMIT ${limit} OFFSET ${offset}\n      `;\n\n      total = await logbookDB.queryRow<{ count: number }>`\n        SELECT COUNT(*) as count FROM flights f\n        WHERE f.pilot_id = ${req.pilotId}\n      `;\n    } else {\n      flights = await logbookDB.queryAll<any>`\n        SELECT \n          f.id, f.pilot_id, f.aircraft_type, f.mission_name,\n          f.start_time, f.end_time, f.duration_seconds,\n          f.aa_kills, f.ag_kills, f.frat_kills, f.rtb_count,\n          f.ejections, f.deaths, f.tacview_filename, f.created_at,\n          p.name as pilot_name, p.callsign as pilot_callsign\n        FROM flights f\n        JOIN pilots p ON f.pilot_id = p.id\n        ORDER BY f.start_time DESC\n        LIMIT ${limit} OFFSET ${offset}\n      `;\n\n      total = await logbookDB.queryRow<{ count: number }>`\n        SELECT COUNT(*) as count FROM flights f\n      `;\n    }\n\n    const flightSummaries: FlightSummary[] = flights.map(flight => ({\n      id: flight.id,\n      pilotId: flight.pilot_id,\n      aircraftType: flight.aircraft_type,\n      missionName: flight.mission_name,\n      startTime: flight.start_time,\n      endTime: flight.end_time,\n      durationSeconds: flight.duration_seconds,\n      aaKills: flight.aa_kills,\n      agKills: flight.ag_kills,\n      fratKills: flight.frat_kills,\n      rtbCount: flight.rtb_count,\n      ejections: flight.ejections,\n      deaths: flight.deaths,\n      tacviewFilename: flight.tacview_filename,\n      createdAt: flight.created_at,\n      pilotName: flight.pilot_name,\n      pilotCallsign: flight.pilot_callsign\n    }));\n\n    return {\n      flights: flightSummaries,\n      total: total?.count || 0\n    };\n  }\n);\n", "import { api } from \"encore.dev/api\";\nimport { logbookDB } from \"./db\";\nimport type { PilotStats } from \"./types\";\n\nexport interface ListPilotsResponse {\n  pilots: PilotStats[];\n}\n\n// Retrieves all pilots with their statistics.\nexport const listPilots = api<void, ListPilotsResponse>(\n  { expose: true, method: \"GET\", path: \"/pilots\" },\n  async () => {\n    const pilots = await logbookDB.queryAll<any>`\n      SELECT \n        p.id, p.name, p.callsign, p.created_at,\n        COUNT(f.id) as total_flights,\n        COALESCE(SUM(f.duration_seconds), 0) as total_flight_time,\n        COALESCE(SUM(f.aa_kills), 0) as total_aa_kills,\n        COALESCE(SUM(f.ag_kills), 0) as total_ag_kills,\n        COALESCE(SUM(f.frat_kills), 0) as total_frat_kills,\n        COALESCE(SUM(f.rtb_count), 0) as total_rtb_count,\n        COALESCE(SUM(f.ejections), 0) as total_ejections,\n        COALESCE(SUM(f.deaths), 0) as total_deaths,\n        COALESCE(AVG(f.duration_seconds)::INTEGER, 0) as average_flight_duration\n      FROM pilots p\n      LEFT JOIN flights f ON p.id = f.pilot_id\n      GROUP BY p.id, p.name, p.callsign, p.created_at\n      ORDER BY total_flights DESC, p.name ASC\n    `;\n\n    const pilotStats: PilotStats[] = [];\n\n    for (const pilot of pilots) {\n      // Get favorite aircraft\n      const favoriteAircraft = await logbookDB.queryRow<{ aircraft_type: string }>`\n        SELECT aircraft_type\n        FROM flights\n        WHERE pilot_id = ${pilot.id}\n        GROUP BY aircraft_type\n        ORDER BY COUNT(*) DESC\n        LIMIT 1\n      `;\n\n      pilotStats.push({\n        pilot: {\n          id: pilot.id,\n          name: pilot.name,\n          callsign: pilot.callsign,\n          createdAt: pilot.created_at\n        },\n        totalFlights: pilot.total_flights,\n        totalFlightTime: pilot.total_flight_time,\n        totalAaKills: pilot.total_aa_kills,\n        totalAgKills: pilot.total_ag_kills,\n        totalFratKills: pilot.total_frat_kills,\n        totalRtbCount: pilot.total_rtb_count,\n        totalEjections: pilot.total_ejections,\n        totalDeaths: pilot.total_deaths,\n        favoriteAircraft: favoriteAircraft?.aircraft_type || 'None',\n        averageFlightDuration: pilot.average_flight_duration\n      });\n    }\n\n    return { pilots: pilotStats };\n  }\n);\n", "import { api, APIError } from \"encore.dev/api\";\nimport { Bucket } from \"encore.dev/storage/objects\";\nimport { logbookDB } from \"./db\";\n\nconst tacviewBucket = new Bucket(\"tacview-files\");\n\nexport interface UploadTacviewRequest {\n  filename: string;\n  fileData: string; // base64 encoded file data\n}\n\nexport interface UploadTacviewResponse {\n  flightId: number;\n  message: string;\n}\n\n// Uploads a Tacview file and processes it to extract flight data.\nexport const uploadTacview = api<UploadTacviewRequest, UploadTacviewResponse>(\n  { expose: true, method: \"POST\", path: \"/tacview/upload\" },\n  async (req) => {\n    console.log('Upload API called with:', {\n      filename: req.filename,\n      hasFileData: !!req.fileData,\n      fileDataLength: req.fileData?.length || 0\n    });\n\n    try {\n      // Validate input\n      if (!req.filename || !req.fileData) {\n        console.error('Missing required fields:', { filename: !!req.filename, fileData: !!req.fileData });\n        throw APIError.invalidArgument(\"filename and fileData are required\");\n      }\n\n      // Validate filename\n      if (typeof req.filename !== 'string' || req.filename.trim().length === 0) {\n        console.error('Invalid filename:', req.filename);\n        throw APIError.invalidArgument(\"filename must be a non-empty string\");\n      }\n\n      // Validate file extension\n      const validExtensions = ['.acmi', '.txt'];\n      const fileExtension = req.filename.toLowerCase().substring(req.filename.lastIndexOf('.'));\n      if (!validExtensions.includes(fileExtension)) {\n        console.error('Invalid file extension:', fileExtension);\n        throw APIError.invalidArgument(\"file must have .acmi or .txt extension\");\n      }\n\n      // Validate base64 data\n      if (typeof req.fileData !== 'string' || req.fileData.trim().length === 0) {\n        console.error('Invalid fileData type or empty:', typeof req.fileData, req.fileData?.length);\n        throw APIError.invalidArgument(\"fileData must be a non-empty string\");\n      }\n\n      let fileBuffer: Buffer;\n      try {\n        console.log('Converting base64 to buffer...');\n        fileBuffer = Buffer.from(req.fileData, 'base64');\n        console.log('Buffer created, size:', fileBuffer.length);\n        \n        // Validate buffer size (max 50MB)\n        if (fileBuffer.length > 50 * 1024 * 1024) {\n          console.error('File too large:', fileBuffer.length);\n          throw APIError.invalidArgument(\"file size exceeds 50MB limit\");\n        }\n        \n        // Validate buffer is not empty\n        if (fileBuffer.length === 0) {\n          console.error('Empty file buffer');\n          throw APIError.invalidArgument(\"file data is empty\");\n        }\n      } catch (error) {\n        console.error('Base64 conversion error:', error);\n        throw APIError.invalidArgument(\"invalid base64 file data\");\n      }\n\n      // Parse the Tacview file content\n      let fileContent: string;\n      try {\n        console.log('Converting buffer to UTF-8 string...');\n        fileContent = fileBuffer.toString('utf-8');\n        console.log('File content length:', fileContent.length);\n      } catch (error) {\n        console.error('UTF-8 conversion error:', error);\n        throw APIError.invalidArgument(\"file content is not valid UTF-8 text\");\n      }\n\n      console.log('Parsing Tacview file...');\n      const flightData = parseTacviewFile(fileContent, req.filename);\n      console.log('Parsed flight data:', {\n        pilotName: flightData.pilotName,\n        aircraftType: flightData.aircraftType,\n        aaKills: flightData.aaKills,\n        agKills: flightData.agKills,\n        fratKills: flightData.fratKills,\n        rtbCount: flightData.rtbCount,\n        ejections: flightData.ejections,\n        deaths: flightData.deaths\n      });\n\n      // Validate parsed flight data\n      if (!flightData.pilotName || flightData.pilotName.trim().length === 0) {\n        console.error('No pilot name extracted');\n        throw APIError.invalidArgument(\"could not extract pilot name from file\");\n      }\n\n      if (!flightData.aircraftType || flightData.aircraftType.trim().length === 0) {\n        console.error('No aircraft type extracted');\n        throw APIError.invalidArgument(\"could not extract aircraft type from file\");\n      }\n\n      // Create or get pilot\n      console.log('Creating or finding pilot...');\n      let pilot = await logbookDB.queryRow<{ id: number }>`\n        SELECT id FROM pilots WHERE name = ${flightData.pilotName}\n      `;\n\n      if (!pilot) {\n        console.log('Creating new pilot...');\n        pilot = await logbookDB.queryRow<{ id: number }>`\n          INSERT INTO pilots (name, callsign) \n          VALUES (${flightData.pilotName}, ${flightData.callsign || null})\n          RETURNING id\n        `;\n      }\n\n      if (!pilot) {\n        console.error('Failed to create or retrieve pilot');\n        throw APIError.internal(\"failed to create or retrieve pilot\");\n      }\n\n      console.log('Pilot ID:', pilot.id);\n\n      // Create flight record with simplified stats\n      console.log('Creating flight record...');\n      const flight = await logbookDB.queryRow<{ id: number }>`\n        INSERT INTO flights (\n          pilot_id, aircraft_type, mission_name, start_time, end_time,\n          duration_seconds, aa_kills, ag_kills, frat_kills, rtb_count,\n          ejections, deaths, tacview_filename\n        ) VALUES (\n          ${pilot.id}, ${flightData.aircraftType}, ${flightData.missionName || null},\n          ${flightData.startTime}, ${flightData.endTime || null}, ${flightData.durationSeconds || null},\n          ${flightData.aaKills}, ${flightData.agKills}, ${flightData.fratKills}, ${flightData.rtbCount},\n          ${flightData.ejections}, ${flightData.deaths}, ${req.filename}\n        )\n        RETURNING id\n      `;\n\n      if (!flight) {\n        console.error('Failed to create flight record');\n        throw APIError.internal(\"failed to create flight record\");\n      }\n\n      console.log('Flight ID:', flight.id);\n\n      const response = {\n        flightId: flight.id,\n        message: `Successfully processed flight for ${flightData.pilotName} in ${flightData.aircraftType}`\n      };\n\n      console.log('Upload completed successfully:', response);\n      return response;\n    } catch (error) {\n      if (error instanceof APIError) {\n        console.error('API Error:', error.code, error.message);\n        throw error;\n      }\n      console.error('Unexpected error during upload processing:', error);\n      throw APIError.internal(`failed to process Tacview file: ${error}`);\n    }\n  }\n);\n\ninterface ParsedFlightData {\n  pilotName: string;\n  callsign?: string;\n  aircraftType: string;\n  missionName?: string;\n  startTime: Date;\n  endTime?: Date;\n  durationSeconds?: number;\n  aaKills: number; // Air-to-Air kills\n  agKills: number; // Air-to-Ground kills\n  fratKills: number; // Friendly kills\n  rtbCount: number; // Return to base count\n  ejections: number; // Number of ejections\n  deaths: number; // Deaths/KIA\n}\n\nfunction parseTacviewFile(content: string, filename: string): ParsedFlightData {\n  console.log('Starting simplified Tacview file parsing...');\n  const lines = content.split('\\n');\n  console.log('Total lines to parse:', lines.length);\n  \n  // Initialize default values\n  const flightData: ParsedFlightData = {\n    pilotName: 'Unknown Pilot',\n    aircraftType: 'Unknown Aircraft',\n    missionName: filename.replace('.acmi', '').replace('.txt', ''),\n    startTime: new Date(),\n    aaKills: 0,\n    agKills: 0,\n    fratKills: 0,\n    rtbCount: 0,\n    ejections: 0,\n    deaths: 0\n  };\n\n  let currentTime = 0;\n  let pilotObjectId: string | null = null;\n  let startTime: number | null = null;\n  let endTime: number | null = null;\n\n  try {\n    for (let i = 0; i < lines.length; i++) {\n      const trimmedLine = lines[i].trim();\n      \n      // Skip empty lines\n      if (!trimmedLine) continue;\n      \n      // Parse time reference\n      if (trimmedLine.startsWith('0,ReferenceTime=')) {\n        const timeStr = trimmedLine.split('=')[1];\n        try {\n          flightData.startTime = new Date(timeStr);\n          console.log('Parsed start time:', flightData.startTime);\n        } catch (e) {\n          console.warn('Failed to parse reference time:', timeStr);\n          flightData.startTime = new Date();\n        }\n        continue;\n      }\n\n      // Parse time updates\n      if (trimmedLine.startsWith('#')) {\n        const timeValue = trimmedLine.substring(1);\n        const parsedTime = parseFloat(timeValue);\n        if (!isNaN(parsedTime)) {\n          currentTime = parsedTime;\n          if (startTime === null) {\n            startTime = parsedTime;\n          }\n          endTime = parsedTime;\n        }\n        continue;\n      }\n\n      // Parse object data to identify pilot and aircraft\n      if (trimmedLine.includes(',') && !trimmedLine.startsWith('#')) {\n        const parts = trimmedLine.split(',');\n        const objectId = parts[0];\n        \n        for (const part of parts) {\n          if (part.startsWith('Name=')) {\n            const name = part.substring(5);\n            if (name.includes('|')) {\n              const nameParts = name.split('|');\n              flightData.pilotName = nameParts[0] || 'Unknown Pilot';\n              if (nameParts.length > 1 && nameParts[1]) {\n                flightData.callsign = nameParts[1];\n              }\n            } else {\n              flightData.pilotName = name || 'Unknown Pilot';\n            }\n            pilotObjectId = objectId;\n            console.log('Found pilot:', flightData.pilotName, 'callsign:', flightData.callsign);\n          }\n          \n          if (part.startsWith('Type=')) {\n            const type = part.substring(5);\n            if (objectId === pilotObjectId && type) {\n              flightData.aircraftType = type;\n              console.log('Found aircraft type:', flightData.aircraftType);\n            }\n          }\n        }\n      }\n\n      // Parse events for simplified statistics\n      if (trimmedLine.includes('Event=')) {\n        const eventLine = trimmedLine.toLowerCase();\n        \n        // Air-to-Air kills (aircraft destroyed)\n        if (eventLine.includes('destroyed') && (eventLine.includes('aircraft') || eventLine.includes('plane') || eventLine.includes('fighter') || eventLine.includes('bomber'))) {\n          flightData.aaKills++;\n          console.log('Found A-A kill event at time:', currentTime);\n        }\n        \n        // Air-to-Ground kills (ground targets destroyed)\n        else if (eventLine.includes('destroyed') && (eventLine.includes('tank') || eventLine.includes('vehicle') || eventLine.includes('ground') || eventLine.includes('sam') || eventLine.includes('aaa'))) {\n          flightData.agKills++;\n          console.log('Found A-G kill event at time:', currentTime);\n        }\n        \n        // Friendly kills\n        else if (eventLine.includes('friendly') && eventLine.includes('destroyed')) {\n          flightData.fratKills++;\n          console.log('Found friendly kill event at time:', currentTime);\n        }\n        \n        // Return to base\n        else if (eventLine.includes('rtb') || eventLine.includes('return') || eventLine.includes('landed')) {\n          flightData.rtbCount++;\n          console.log('Found RTB event at time:', currentTime);\n        }\n        \n        // Ejections\n        else if (eventLine.includes('eject') || eventLine.includes('bailout')) {\n          flightData.ejections++;\n          console.log('Found ejection event at time:', currentTime);\n        }\n        \n        // Deaths/KIA\n        else if (eventLine.includes('pilot killed') || eventLine.includes('crashed') || eventLine.includes('kia')) {\n          flightData.deaths++;\n          console.log('Found death event at time:', currentTime);\n        }\n      }\n    }\n  } catch (error) {\n    console.error('Error parsing Tacview file:', error);\n    // Continue with default values\n  }\n\n  // Calculate duration if we have time data\n  if (startTime !== null && endTime !== null && endTime > startTime) {\n    flightData.durationSeconds = Math.round(endTime - startTime);\n    flightData.endTime = new Date(flightData.startTime.getTime() + flightData.durationSeconds * 1000);\n  }\n\n  console.log('Parsing completed. Final flight data:', {\n    pilotName: flightData.pilotName,\n    aircraftType: flightData.aircraftType,\n    duration: flightData.durationSeconds,\n    aaKills: flightData.aaKills,\n    agKills: flightData.agKills,\n    fratKills: flightData.fratKills,\n    rtbCount: flightData.rtbCount,\n    ejections: flightData.ejections,\n    deaths: flightData.deaths\n  });\n\n  return flightData;\n}\n", "import { Service } from \"encore.dev/service\";\n\nexport default new Service(\"discord\");\n", "import { Service } from \"encore.dev/service\";\n\nexport default new Service(\"logbook\");\n"],
  "mappings": ";;;;;AAAA,SAAS,kBAAkB,kBAAkB,WAAyB;;;ACAtE,SAAS,WAAW;AACpB,SAAS,cAAc;AAEvB,IAAM,oBAAoB,OAAO,mBAAmB;AAuB7C,IAAM,iBAAiB;AAAA,EAC5B,EAAE,QAAQ,MAAM,QAAQ,QAAQ,MAAM,uBAAuB;AAAA,EAC7D,OAAO,QAAQ;AACb,UAAM,aAAa,kBAAkB;AAErC,QAAI,CAAC,YAAY;AACf,aAAO;AAAA,QACL,SAAS;AAAA,QACT,SAAS;AAAA,MACX;AAAA,IACF;AAEA,UAAM,aAAa,IAAI,eAAe,IAAI;AAC1C,UAAM,iBAAiB,IAAI,cAAc,KAAK,aAAa,IAAI,aAAa,QAAQ,CAAC,IAAI,WAAW,SAAS;AAE7G,UAAM,QAAQ;AAAA,MACZ,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,QACN;AAAA,UACE,MAAM;AAAA,UACN,OAAO,IAAI,gBAAgB,GAAG,IAAI,SAAS,KAAK,IAAI,aAAa,MAAM,IAAI;AAAA,UAC3E,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO,IAAI,aAAa,SAAS;AAAA,UACjC,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO,eAAe,IAAI,eAAe;AAAA,UACzC,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO,eAAe,IAAI,qBAAqB;AAAA,UAC/C,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO,IAAI,aAAa,SAAS;AAAA,UACjC,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO,IAAI,aAAa,SAAS;AAAA,UACjC,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO,WAAW,SAAS;AAAA,UAC3B,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO,IAAI,eAAe,SAAS;AAAA,UACnC,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO,IAAI,cAAc,SAAS;AAAA,UAClC,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO,IAAI,eAAe,SAAS;AAAA,UACnC,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO,IAAI,YAAY,SAAS;AAAA,UAChC,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,UACP,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO,IAAI;AAAA,UACX,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MAClC,QAAQ;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAEA,UAAM,UAAU;AAAA,MACd,QAAQ,CAAC,KAAK;AAAA,IAChB;AAEA,QAAI;AACF,YAAM,WAAW,MAAM,MAAM,YAAY;AAAA,QACvC,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,gBAAgB;AAAA,QAClB;AAAA,QACA,MAAM,KAAK,UAAU,OAAO;AAAA,MAC9B,CAAC;AAED,UAAI,SAAS,IAAI;AACf,eAAO;AAAA,UACL,SAAS;AAAA,UACT,SAAS;AAAA,QACX;AAAA,MACF,OAAO;AACL,eAAO;AAAA,UACL,SAAS;AAAA,UACT,SAAS,8BAA8B,SAAS,MAAM,IAAI,SAAS,UAAU;AAAA,QAC/E;AAAA,MACF;AAAA,IACF,SAAS,OAAO;AACd,aAAO;AAAA,QACL,SAAS;AAAA,QACT,SAAS,6BAA6B,KAAK;AAAA,MAC7C;AAAA,IACF;AAAA,EACF;AACF;AAEA,SAAS,eAAe,SAAyB;AAC/C,QAAM,QAAQ,KAAK,MAAM,UAAU,IAAI;AACvC,QAAM,UAAU,KAAK,MAAO,UAAU,OAAQ,EAAE;AAChD,QAAM,mBAAmB,UAAU;AAEnC,MAAI,QAAQ,GAAG;AACb,WAAO,GAAG,KAAK,KAAK,OAAO;AAAA,EAC7B,WAAW,UAAU,GAAG;AACtB,WAAO,GAAG,OAAO,KAAK,gBAAgB;AAAA,EACxC,OAAO;AACL,WAAO,GAAG,gBAAgB;AAAA,EAC5B;AACF;;;AClKA,SAAS,OAAAA,YAAW;AACpB,SAAS,UAAAC,eAAc;AAEvB,IAAMC,qBAAoBD,QAAO,mBAAmB;AAwB7C,IAAM,oBAAoBD;AAAA,EAC/B,EAAE,QAAQ,MAAM,QAAQ,QAAQ,MAAM,0BAA0B;AAAA,EAChE,OAAO,QAAQ;AACb,UAAM,aAAaE,mBAAkB;AAErC,QAAI,CAAC,YAAY;AACf,aAAO;AAAA,QACL,SAAS;AAAA,QACT,SAAS;AAAA,MACX;AAAA,IACF;AAEA,UAAM,QAAQ;AAAA,MACZ,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,QACN;AAAA,UACE,MAAM;AAAA,UACN,OAAO,IAAI,gBAAgB,GAAG,IAAI,SAAS,KAAK,IAAI,aAAa,MAAM,IAAI;AAAA,UAC3E,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO,IAAI;AAAA,UACX,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO,IAAI,eAAe;AAAA,UAC1B,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO,IAAI,kBAAkBC,gBAAe,IAAI,eAAe,IAAI;AAAA,UACnE,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO,IAAI,QAAQ,SAAS;AAAA,UAC5B,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO,IAAI,QAAQ,SAAS;AAAA,UAC5B,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO,IAAI,UAAU,SAAS;AAAA,UAC9B,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO,IAAI,SAAS,SAAS;AAAA,UAC7B,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO,IAAI,UAAU,SAAS;AAAA,UAC9B,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,OAAO,IAAI,OAAO,SAAS;AAAA,UAC3B,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,WAAW,IAAI,UAAU,YAAY;AAAA,MACrC,QAAQ;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF;AAEA,UAAM,UAAU;AAAA,MACd,QAAQ,CAAC,KAAK;AAAA,IAChB;AAEA,QAAI;AACF,YAAM,WAAW,MAAM,MAAM,YAAY;AAAA,QACvC,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,gBAAgB;AAAA,QAClB;AAAA,QACA,MAAM,KAAK,UAAU,OAAO;AAAA,MAC9B,CAAC;AAED,UAAI,SAAS,IAAI;AACf,eAAO;AAAA,UACL,SAAS;AAAA,UACT,SAAS;AAAA,QACX;AAAA,MACF,OAAO;AACL,eAAO;AAAA,UACL,SAAS;AAAA,UACT,SAAS,8BAA8B,SAAS,MAAM,IAAI,SAAS,UAAU;AAAA,QAC/E;AAAA,MACF;AAAA,IACF,SAAS,OAAO;AACd,aAAO;AAAA,QACL,SAAS;AAAA,QACT,SAAS,6BAA6B,KAAK;AAAA,MAC7C;AAAA,IACF;AAAA,EACF;AACF;AAEA,SAASA,gBAAe,SAAyB;AAC/C,QAAM,QAAQ,KAAK,MAAM,UAAU,IAAI;AACvC,QAAM,UAAU,KAAK,MAAO,UAAU,OAAQ,EAAE;AAChD,QAAM,mBAAmB,UAAU;AAEnC,MAAI,QAAQ,GAAG;AACb,WAAO,GAAG,KAAK,KAAK,OAAO,KAAK,gBAAgB;AAAA,EAClD,WAAW,UAAU,GAAG;AACtB,WAAO,GAAG,OAAO,KAAK,gBAAgB;AAAA,EACxC,OAAO;AACL,WAAO,GAAG,gBAAgB;AAAA,EAC5B;AACF;;;ACjJA,SAAS,OAAAC,MAAK,gBAAgB;;;ACA9B,SAAS,mBAAmB;AAErB,IAAM,YAAY,IAAI,YAAY,WAAW;AAAA,EAClD,YAAY;AACd,CAAC;;;ADKM,IAAM,YAAYC;AAAA,EACvB,EAAE,QAAQ,MAAM,QAAQ,OAAO,MAAM,eAAe;AAAA,EACpD,OAAO,QAAQ;AACb,UAAM,SAAS,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBASd,IAAI,EAAE;AAAA;AAGvB,QAAI,CAAC,QAAQ;AACX,YAAM,SAAS,SAAS,kBAAkB;AAAA,IAC5C;AAEA,WAAO;AAAA,MACL,IAAI,OAAO;AAAA,MACX,SAAS,OAAO;AAAA,MAChB,cAAc,OAAO;AAAA,MACrB,aAAa,OAAO;AAAA,MACpB,WAAW,OAAO;AAAA,MAClB,SAAS,OAAO;AAAA,MAChB,iBAAiB,OAAO;AAAA,MACxB,SAAS,OAAO;AAAA,MAChB,SAAS,OAAO;AAAA,MAChB,WAAW,OAAO;AAAA,MAClB,UAAU,OAAO;AAAA,MACjB,WAAW,OAAO;AAAA,MAClB,QAAQ,OAAO;AAAA,MACf,iBAAiB,OAAO;AAAA,MACxB,WAAW,OAAO;AAAA,MAClB,WAAW,OAAO;AAAA,MAClB,eAAe,OAAO;AAAA,IACxB;AAAA,EACF;AACF;;;AEhDA,SAAS,OAAAC,YAAW;AAiBb,IAAM,cAAcC;AAAA,EACzB,EAAE,QAAQ,MAAM,QAAQ,OAAO,MAAM,WAAW;AAAA,EAChD,OAAO,QAAQ;AACb,UAAM,QAAQ,IAAI,SAAS;AAC3B,UAAM,SAAS,IAAI,UAAU;AAE7B,QAAI;AACJ,QAAI;AAEJ,QAAI,IAAI,SAAS;AACf,gBAAU,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BASH,IAAI,OAAO;AAAA;AAAA,gBAExB,KAAK,WAAW,MAAM;AAAA;AAGhC,cAAQ,MAAM,UAAU;AAAA;AAAA,6BAED,IAAI,OAAO;AAAA;AAAA,IAEpC,OAAO;AACL,gBAAU,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAUhB,KAAK,WAAW,MAAM;AAAA;AAGhC,cAAQ,MAAM,UAAU;AAAA;AAAA;AAAA,IAG1B;AAEA,UAAM,kBAAmC,QAAQ,IAAI,aAAW;AAAA,MAC9D,IAAI,OAAO;AAAA,MACX,SAAS,OAAO;AAAA,MAChB,cAAc,OAAO;AAAA,MACrB,aAAa,OAAO;AAAA,MACpB,WAAW,OAAO;AAAA,MAClB,SAAS,OAAO;AAAA,MAChB,iBAAiB,OAAO;AAAA,MACxB,SAAS,OAAO;AAAA,MAChB,SAAS,OAAO;AAAA,MAChB,WAAW,OAAO;AAAA,MAClB,UAAU,OAAO;AAAA,MACjB,WAAW,OAAO;AAAA,MAClB,QAAQ,OAAO;AAAA,MACf,iBAAiB,OAAO;AAAA,MACxB,WAAW,OAAO;AAAA,MAClB,WAAW,OAAO;AAAA,MAClB,eAAe,OAAO;AAAA,IACxB,EAAE;AAEF,WAAO;AAAA,MACL,SAAS;AAAA,MACT,OAAO,OAAO,SAAS;AAAA,IACzB;AAAA,EACF;AACF;;;ACzFA,SAAS,OAAAC,YAAW;AASb,IAAM,aAAaC;AAAA,EACxB,EAAE,QAAQ,MAAM,QAAQ,OAAO,MAAM,UAAU;AAAA,EAC/C,YAAY;AACV,UAAM,SAAS,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkB/B,UAAM,aAA2B,CAAC;AAElC,eAAW,SAAS,QAAQ;AAE1B,YAAM,mBAAmB,MAAM,UAAU;AAAA;AAAA;AAAA,2BAGpB,MAAM,EAAE;AAAA;AAAA;AAAA;AAAA;AAM7B,iBAAW,KAAK;AAAA,QACd,OAAO;AAAA,UACL,IAAI,MAAM;AAAA,UACV,MAAM,MAAM;AAAA,UACZ,UAAU,MAAM;AAAA,UAChB,WAAW,MAAM;AAAA,QACnB;AAAA,QACA,cAAc,MAAM;AAAA,QACpB,iBAAiB,MAAM;AAAA,QACvB,cAAc,MAAM;AAAA,QACpB,cAAc,MAAM;AAAA,QACpB,gBAAgB,MAAM;AAAA,QACtB,eAAe,MAAM;AAAA,QACrB,gBAAgB,MAAM;AAAA,QACtB,aAAa,MAAM;AAAA,QACnB,kBAAkB,kBAAkB,iBAAiB;AAAA,QACrD,uBAAuB,MAAM;AAAA,MAC/B,CAAC;AAAA,IACH;AAEA,WAAO,EAAE,QAAQ,WAAW;AAAA,EAC9B;AACF;;;ACjEA,SAAS,OAAAC,MAAK,YAAAC,iBAAgB;AAC9B,SAAS,cAAc;AAGvB,IAAM,gBAAgB,IAAI,OAAO,eAAe;AAazC,IAAM,gBAAgBC;AAAA,EAC3B,EAAE,QAAQ,MAAM,QAAQ,QAAQ,MAAM,kBAAkB;AAAA,EACxD,OAAO,QAAQ;AACb,YAAQ,IAAI,2BAA2B;AAAA,MACrC,UAAU,IAAI;AAAA,MACd,aAAa,CAAC,CAAC,IAAI;AAAA,MACnB,gBAAgB,IAAI,UAAU,UAAU;AAAA,IAC1C,CAAC;AAED,QAAI;AAEF,UAAI,CAAC,IAAI,YAAY,CAAC,IAAI,UAAU;AAClC,gBAAQ,MAAM,4BAA4B,EAAE,UAAU,CAAC,CAAC,IAAI,UAAU,UAAU,CAAC,CAAC,IAAI,SAAS,CAAC;AAChG,cAAMC,UAAS,gBAAgB,oCAAoC;AAAA,MACrE;AAGA,UAAI,OAAO,IAAI,aAAa,YAAY,IAAI,SAAS,KAAK,EAAE,WAAW,GAAG;AACxE,gBAAQ,MAAM,qBAAqB,IAAI,QAAQ;AAC/C,cAAMA,UAAS,gBAAgB,qCAAqC;AAAA,MACtE;AAGA,YAAM,kBAAkB,CAAC,SAAS,MAAM;AACxC,YAAM,gBAAgB,IAAI,SAAS,YAAY,EAAE,UAAU,IAAI,SAAS,YAAY,GAAG,CAAC;AACxF,UAAI,CAAC,gBAAgB,SAAS,aAAa,GAAG;AAC5C,gBAAQ,MAAM,2BAA2B,aAAa;AACtD,cAAMA,UAAS,gBAAgB,wCAAwC;AAAA,MACzE;AAGA,UAAI,OAAO,IAAI,aAAa,YAAY,IAAI,SAAS,KAAK,EAAE,WAAW,GAAG;AACxE,gBAAQ,MAAM,mCAAmC,OAAO,IAAI,UAAU,IAAI,UAAU,MAAM;AAC1F,cAAMA,UAAS,gBAAgB,qCAAqC;AAAA,MACtE;AAEA,UAAI;AACJ,UAAI;AACF,gBAAQ,IAAI,gCAAgC;AAC5C,qBAAa,OAAO,KAAK,IAAI,UAAU,QAAQ;AAC/C,gBAAQ,IAAI,yBAAyB,WAAW,MAAM;AAGtD,YAAI,WAAW,SAAS,KAAK,OAAO,MAAM;AACxC,kBAAQ,MAAM,mBAAmB,WAAW,MAAM;AAClD,gBAAMA,UAAS,gBAAgB,8BAA8B;AAAA,QAC/D;AAGA,YAAI,WAAW,WAAW,GAAG;AAC3B,kBAAQ,MAAM,mBAAmB;AACjC,gBAAMA,UAAS,gBAAgB,oBAAoB;AAAA,QACrD;AAAA,MACF,SAAS,OAAO;AACd,gBAAQ,MAAM,4BAA4B,KAAK;AAC/C,cAAMA,UAAS,gBAAgB,0BAA0B;AAAA,MAC3D;AAGA,UAAI;AACJ,UAAI;AACF,gBAAQ,IAAI,sCAAsC;AAClD,sBAAc,WAAW,SAAS,OAAO;AACzC,gBAAQ,IAAI,wBAAwB,YAAY,MAAM;AAAA,MACxD,SAAS,OAAO;AACd,gBAAQ,MAAM,2BAA2B,KAAK;AAC9C,cAAMA,UAAS,gBAAgB,sCAAsC;AAAA,MACvE;AAEA,cAAQ,IAAI,yBAAyB;AACrC,YAAM,aAAa,iBAAiB,aAAa,IAAI,QAAQ;AAC7D,cAAQ,IAAI,uBAAuB;AAAA,QACjC,WAAW,WAAW;AAAA,QACtB,cAAc,WAAW;AAAA,QACzB,SAAS,WAAW;AAAA,QACpB,SAAS,WAAW;AAAA,QACpB,WAAW,WAAW;AAAA,QACtB,UAAU,WAAW;AAAA,QACrB,WAAW,WAAW;AAAA,QACtB,QAAQ,WAAW;AAAA,MACrB,CAAC;AAGD,UAAI,CAAC,WAAW,aAAa,WAAW,UAAU,KAAK,EAAE,WAAW,GAAG;AACrE,gBAAQ,MAAM,yBAAyB;AACvC,cAAMA,UAAS,gBAAgB,wCAAwC;AAAA,MACzE;AAEA,UAAI,CAAC,WAAW,gBAAgB,WAAW,aAAa,KAAK,EAAE,WAAW,GAAG;AAC3E,gBAAQ,MAAM,4BAA4B;AAC1C,cAAMA,UAAS,gBAAgB,2CAA2C;AAAA,MAC5E;AAGA,cAAQ,IAAI,8BAA8B;AAC1C,UAAI,QAAQ,MAAM,UAAU;AAAA,6CACW,WAAW,SAAS;AAAA;AAG3D,UAAI,CAAC,OAAO;AACV,gBAAQ,IAAI,uBAAuB;AACnC,gBAAQ,MAAM,UAAU;AAAA;AAAA,oBAEZ,WAAW,SAAS,KAAK,WAAW,YAAY,IAAI;AAAA;AAAA;AAAA,MAGlE;AAEA,UAAI,CAAC,OAAO;AACV,gBAAQ,MAAM,oCAAoC;AAClD,cAAMA,UAAS,SAAS,oCAAoC;AAAA,MAC9D;AAEA,cAAQ,IAAI,aAAa,MAAM,EAAE;AAGjC,cAAQ,IAAI,2BAA2B;AACvC,YAAM,SAAS,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAMzB,MAAM,EAAE,KAAK,WAAW,YAAY,KAAK,WAAW,eAAe,IAAI;AAAA,YACvE,WAAW,SAAS,KAAK,WAAW,WAAW,IAAI,KAAK,WAAW,mBAAmB,IAAI;AAAA,YAC1F,WAAW,OAAO,KAAK,WAAW,OAAO,KAAK,WAAW,SAAS,KAAK,WAAW,QAAQ;AAAA,YAC1F,WAAW,SAAS,KAAK,WAAW,MAAM,KAAK,IAAI,QAAQ;AAAA;AAAA;AAAA;AAKjE,UAAI,CAAC,QAAQ;AACX,gBAAQ,MAAM,gCAAgC;AAC9C,cAAMA,UAAS,SAAS,gCAAgC;AAAA,MAC1D;AAEA,cAAQ,IAAI,cAAc,OAAO,EAAE;AAEnC,YAAM,WAAW;AAAA,QACf,UAAU,OAAO;AAAA,QACjB,SAAS,qCAAqC,WAAW,SAAS,OAAO,WAAW,YAAY;AAAA,MAClG;AAEA,cAAQ,IAAI,kCAAkC,QAAQ;AACtD,aAAO;AAAA,IACT,SAAS,OAAO;AACd,UAAI,iBAAiBA,WAAU;AAC7B,gBAAQ,MAAM,cAAc,MAAM,MAAM,MAAM,OAAO;AACrD,cAAM;AAAA,MACR;AACA,cAAQ,MAAM,8CAA8C,KAAK;AACjE,YAAMA,UAAS,SAAS,mCAAmC,KAAK,EAAE;AAAA,IACpE;AAAA,EACF;AACF;AAkBA,SAAS,iBAAiB,SAAiB,UAAoC;AAC7E,UAAQ,IAAI,6CAA6C;AACzD,QAAM,QAAQ,QAAQ,MAAM,IAAI;AAChC,UAAQ,IAAI,yBAAyB,MAAM,MAAM;AAGjD,QAAM,aAA+B;AAAA,IACnC,WAAW;AAAA,IACX,cAAc;AAAA,IACd,aAAa,SAAS,QAAQ,SAAS,EAAE,EAAE,QAAQ,QAAQ,EAAE;AAAA,IAC7D,WAAW,oBAAI,KAAK;AAAA,IACpB,SAAS;AAAA,IACT,SAAS;AAAA,IACT,WAAW;AAAA,IACX,UAAU;AAAA,IACV,WAAW;AAAA,IACX,QAAQ;AAAA,EACV;AAEA,MAAI,cAAc;AAClB,MAAI,gBAA+B;AACnC,MAAI,YAA2B;AAC/B,MAAI,UAAyB;AAE7B,MAAI;AACF,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,YAAM,cAAc,MAAM,CAAC,EAAE,KAAK;AAGlC,UAAI,CAAC;AAAa;AAGlB,UAAI,YAAY,WAAW,kBAAkB,GAAG;AAC9C,cAAM,UAAU,YAAY,MAAM,GAAG,EAAE,CAAC;AACxC,YAAI;AACF,qBAAW,YAAY,IAAI,KAAK,OAAO;AACvC,kBAAQ,IAAI,sBAAsB,WAAW,SAAS;AAAA,QACxD,SAAS,GAAG;AACV,kBAAQ,KAAK,mCAAmC,OAAO;AACvD,qBAAW,YAAY,oBAAI,KAAK;AAAA,QAClC;AACA;AAAA,MACF;AAGA,UAAI,YAAY,WAAW,GAAG,GAAG;AAC/B,cAAM,YAAY,YAAY,UAAU,CAAC;AACzC,cAAM,aAAa,WAAW,SAAS;AACvC,YAAI,CAAC,MAAM,UAAU,GAAG;AACtB,wBAAc;AACd,cAAI,cAAc,MAAM;AACtB,wBAAY;AAAA,UACd;AACA,oBAAU;AAAA,QACZ;AACA;AAAA,MACF;AAGA,UAAI,YAAY,SAAS,GAAG,KAAK,CAAC,YAAY,WAAW,GAAG,GAAG;AAC7D,cAAM,QAAQ,YAAY,MAAM,GAAG;AACnC,cAAM,WAAW,MAAM,CAAC;AAExB,mBAAW,QAAQ,OAAO;AACxB,cAAI,KAAK,WAAW,OAAO,GAAG;AAC5B,kBAAM,OAAO,KAAK,UAAU,CAAC;AAC7B,gBAAI,KAAK,SAAS,GAAG,GAAG;AACtB,oBAAM,YAAY,KAAK,MAAM,GAAG;AAChC,yBAAW,YAAY,UAAU,CAAC,KAAK;AACvC,kBAAI,UAAU,SAAS,KAAK,UAAU,CAAC,GAAG;AACxC,2BAAW,WAAW,UAAU,CAAC;AAAA,cACnC;AAAA,YACF,OAAO;AACL,yBAAW,YAAY,QAAQ;AAAA,YACjC;AACA,4BAAgB;AAChB,oBAAQ,IAAI,gBAAgB,WAAW,WAAW,aAAa,WAAW,QAAQ;AAAA,UACpF;AAEA,cAAI,KAAK,WAAW,OAAO,GAAG;AAC5B,kBAAM,OAAO,KAAK,UAAU,CAAC;AAC7B,gBAAI,aAAa,iBAAiB,MAAM;AACtC,yBAAW,eAAe;AAC1B,sBAAQ,IAAI,wBAAwB,WAAW,YAAY;AAAA,YAC7D;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAGA,UAAI,YAAY,SAAS,QAAQ,GAAG;AAClC,cAAM,YAAY,YAAY,YAAY;AAG1C,YAAI,UAAU,SAAS,WAAW,MAAM,UAAU,SAAS,UAAU,KAAK,UAAU,SAAS,OAAO,KAAK,UAAU,SAAS,SAAS,KAAK,UAAU,SAAS,QAAQ,IAAI;AACvK,qBAAW;AACX,kBAAQ,IAAI,iCAAiC,WAAW;AAAA,QAC1D,WAGS,UAAU,SAAS,WAAW,MAAM,UAAU,SAAS,MAAM,KAAK,UAAU,SAAS,SAAS,KAAK,UAAU,SAAS,QAAQ,KAAK,UAAU,SAAS,KAAK,KAAK,UAAU,SAAS,KAAK,IAAI;AACnM,qBAAW;AACX,kBAAQ,IAAI,iCAAiC,WAAW;AAAA,QAC1D,WAGS,UAAU,SAAS,UAAU,KAAK,UAAU,SAAS,WAAW,GAAG;AAC1E,qBAAW;AACX,kBAAQ,IAAI,sCAAsC,WAAW;AAAA,QAC/D,WAGS,UAAU,SAAS,KAAK,KAAK,UAAU,SAAS,QAAQ,KAAK,UAAU,SAAS,QAAQ,GAAG;AAClG,qBAAW;AACX,kBAAQ,IAAI,4BAA4B,WAAW;AAAA,QACrD,WAGS,UAAU,SAAS,OAAO,KAAK,UAAU,SAAS,SAAS,GAAG;AACrE,qBAAW;AACX,kBAAQ,IAAI,iCAAiC,WAAW;AAAA,QAC1D,WAGS,UAAU,SAAS,cAAc,KAAK,UAAU,SAAS,SAAS,KAAK,UAAU,SAAS,KAAK,GAAG;AACzG,qBAAW;AACX,kBAAQ,IAAI,8BAA8B,WAAW;AAAA,QACvD;AAAA,MACF;AAAA,IACF;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,+BAA+B,KAAK;AAAA,EAEpD;AAGA,MAAI,cAAc,QAAQ,YAAY,QAAQ,UAAU,WAAW;AACjE,eAAW,kBAAkB,KAAK,MAAM,UAAU,SAAS;AAC3D,eAAW,UAAU,IAAI,KAAK,WAAW,UAAU,QAAQ,IAAI,WAAW,kBAAkB,GAAI;AAAA,EAClG;AAEA,UAAQ,IAAI,yCAAyC;AAAA,IACnD,WAAW,WAAW;AAAA,IACtB,cAAc,WAAW;AAAA,IACzB,UAAU,WAAW;AAAA,IACrB,SAAS,WAAW;AAAA,IACpB,SAAS,WAAW;AAAA,IACpB,WAAW,WAAW;AAAA,IACtB,UAAU,WAAW;AAAA,IACrB,WAAW,WAAW;AAAA,IACtB,QAAQ,WAAW;AAAA,EACrB,CAAC;AAED,SAAO;AACT;;;ACvVA,SAAS,eAAe;AAExB,IAAO,yBAAQ,IAAI,QAAQ,SAAS;;;ACFpC,SAAS,WAAAC,gBAAe;AAExB,IAAOC,0BAAQ,IAAID,SAAQ,SAAS;;;ATUpC,IAAM,WAAkB,CACxB;AAEA,IAAM,WAAsB;AAAA,EACxB;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,OAAM,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACrF,aAA6B,uBAAQ,IAAI,eAAe,CAAC;AAAA,EAC7D;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,OAAM,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACrF,aAA6B,uBAAQ,IAAI,eAAe,CAAC;AAAA,EAC7D;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,OAAM,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACrF,aAA6BE,wBAAQ,IAAI,eAAe,CAAC;AAAA,EAC7D;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,OAAM,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACrF,aAA6BA,wBAAQ,IAAI,eAAe,CAAC;AAAA,EAC7D;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,OAAM,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACrF,aAA6BA,wBAAQ,IAAI,eAAe,CAAC;AAAA,EAC7D;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,OAAM,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACrF,aAA6BA,wBAAQ,IAAI,eAAe,CAAC;AAAA,EAC7D;AACJ;AAEA,iBAAiB,QAAQ;AACzB,iBAAiB,QAAQ;AAEzB,MAAM,IAAI,YAAY,GAAG;",
  "names": ["api", "secret", "discordWebhookUrl", "formatDuration", "api", "api", "api", "api", "api", "api", "api", "APIError", "api", "APIError", "Service", "encore_service_default", "encore_service_default"]
}
